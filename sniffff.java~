// chapter 2.2-2.4
import org.jnetpcap.Pcap;

// chapter 2.6
import org.jnetpcap.PcapHeader;
import org.jnetpcap.nio.JBuffer;
import org.jnetpcap.packet.PcapPacket;

// to format data and get headers
import org.jnetpcap.packet.format.FormatUtils;
import org.jnetpcap.packet.Payload;
import org.jnetpcap.protocol.lan.Ethernet;
import org.jnetpcap.protocol.network.Icmp;

// chapter 2.7
import org.jnetpcap.packet.PcapPacketHandler;

// chapter 3.1.2
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.packet.JPacket;

import java.net.InetAddress;

public class sniffff {

		public static void main(String args[]) throws Exception {

				// chapter 2.2-4
				// initiate packet capture device
				int snaplen = Pcap.DEFAULT_SNAPLEN;
				int flags = Pcap.MODE_PROMISCUOUS;
				int timeout = Pcap.DEFAULT_TIMEOUT;
				StringBuilder errbuf = new StringBuilder();
				Pcap pcap = Pcap.openLive("wlan0", snaplen, flags, timeout, errbuf);
				if (pcap == null) {
						System.err.printf("Error while opening device for capture: "
																								+ errbuf.toString());
						return;
				}

				final byte[] myinet = {(byte)192, (byte)168, (byte)0, (byte)100};
				final Ip4 ip = new Ip4();

				// packet handler for packet capture
				PcapPacketHandler<String> pcappackethandler = new PcapPacketHandler<String>() {

						// objects to get packet headers
						Ethernet eth = new Ethernet();
						byte[] sip = new byte[3];
						byte[] dip = new byte[3];
						boolean run = false;

						public void nextPacket(PcapPacket pcappacket, String user) {

								// rest in function is about getting
								// headers & payload
								if (pcappacket.hasHeader(ip)) {

										// myinet is not set to host address
										// but loopback address
										if (ip.source() != myinet &&
														ip.destination() != myinet) {
												System.out.println("IP type:\t" + ip.typeEnum());
												sip = ip.source();
												dip = ip.destination();
												System.out.println("IP src:\t-\t" + FormatUtils.ip(sip));
												System.out.println("IP dst:\t-\t" + FormatUtils.ip(dip));
												run = true;
										}
										System.out.println();
										if (pcappacket.hasHeader(eth) &&
														run == true) {
												System.out.println("Ethernet type:\t" + eth.typeEnum());
												System.out.println("Ethernet src:\t" + FormatUtils.mac(eth.source()));
												System.out.println("Ethernet dst:\t" + FormatUtils.mac(eth.destination()));
										}
								}
								System.out.println();
								System.out.println("-");
								System.out.println();
						}
				};
				pcap.loop(Integer.parseInt(args[0]), pcappackethandler, "pressure");
				pcap.close();
		}
}
